package ba.unsa.etf.rpr.controllers;

import ba.unsa.etf.rpr.AppFX;
import ba.unsa.etf.rpr.business.DestinationManager;
import ba.unsa.etf.rpr.business.TripManager;
import ba.unsa.etf.rpr.domain.Destination;
import ba.unsa.etf.rpr.domain.Trip;
import ba.unsa.etf.rpr.exceptions.AppException;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.io.IOException;
import java.util.List;

import static javafx.scene.layout.Region.USE_COMPUTED_SIZE;

/**
 * Controller class for home page.
 *
 * @author Almedina Pehlivan
 */
public class HomeController {

    private int userId;
    private Trip chosenTrip;
    private List<Trip> tripsList;
    private TripManager tripManager = new TripManager();
    private Destination chosenDestination;
    private DestinationManager destinationManager = new DestinationManager();

    @FXML
    private ListView<Destination> destinationsList;

    @FXML
    private Label note;

    @FXML
    private Button deleteButton;

    @FXML
    private Button editButton;

    @FXML
    private Button exploreBtn;

    @FXML
    private Button searchBtn;

    @FXML
    private TextField searchTextField;

    public void setUserId(int userId) {
        this.userId = userId;
    }

    /**
     * Handles the event generated by the "Delete" button.
     */
    @FXML
    void deleteClicked(ActionEvent event) {
        try {
            tripManager.delete(chosenTrip.getId());
            note.setText(chosenDestination.getName() + " deleted.");
            nothingChosenState();
        } catch (AppException e) {
            note.setText("The removal of the selected trip was unsuccessful.");
        }
    }

    /**
     * Opens new window, Explore Page
     * @throws IOException
     */
    @FXML
    void exploreBtnClicked(ActionEvent event) throws IOException {
        Stage stage = (Stage) exploreBtn.getScene().getWindow();
        stage.close();
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/explore page.fxml"));
        Parent root = loader.load();
        ExplorePageController controller = loader.getController();
        controller.setUserId(userId);
        newStage(root,null);
    }

    /**
     * Triggers a search process for destinations using the provided search text and
     * displays the search results in the destinations list.
     */
    @FXML
    void searchClicked(ActionEvent event) {
        try {
            List<Destination> destinations = destinationManager.search(searchTextField.getText());
            destinationsList.getItems().addAll(destinations);
        } catch (AppException e) {
            new Alert(Alert.AlertType.NONE, e.getMessage(), ButtonType.OK).show();
        }
    }

    /**
     *Handles the event when the "Edit" button is clicked.
     *
     * @throws IOException If an I/O error occurs while loading the trip information layout.
     */
    @FXML
    void editButtonClicked(ActionEvent event) throws IOException {
        ((Stage) editButton.getScene().getWindow()).close();
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/trip info.fxml"));
        loader.setController(new TripInfoController(chosenTrip, chosenDestination));
        Parent root = loader.load();
        newStage(root, null);
    }


    @FXML
    void initialize() {
        try {
            nothingChosenState();
            refreshList();
            destinationsList.getSelectionModel().selectedItemProperty().addListener((observableValue, destination, t1) -> {
                chosenDestination = destinationsList.getSelectionModel().getSelectedItem();
                for (Trip trip: tripsList) {
                    if (trip.getDestinationId() == chosenDestination.getId()) {
                        chosenTrip = trip;
                        break;
                    }
                }
                note.setText(chosenTrip.toString());
                editButton.setVisible(true);
                deleteButton.setVisible(true);
            });
        } catch (AppException e) {
            new Alert(Alert.AlertType.NONE, e.getMessage(), ButtonType.OK).show();
        }
    }

    /**
     * Refreshes the trips list by retrieving and displaying destination information for trips associated with the current user.
     * @throws AppException
     */
    private void refreshList() throws AppException {
        tripsList = tripManager.searchByUser(userId);
        for (Trip trip: tripsList) {
            int destinationId = trip.getDestinationId();
            Destination destination = destinationManager.getById(destinationId);
            destinationsList.getItems().add(destination);
        }
    }

    /**
     * Sets the UI to a state where no destination or trip is chosen.
     */
    private void nothingChosenState() {
        editButton.setVisible(false);
        deleteButton.setVisible(false);
        chosenDestination = null;
        chosenTrip = null;
    }

    /**
     * @param root The root content (Parent) to be displayed in the new stage.
     *             If this param is null, passing data to another controller is not necessary
     * @param resource The path to the FXML resource file that defines the scene layout.
     *                 If this param is null, it implies that the root content is preloaded and data is provided to a controller.
     * @throws IOException If an I/O error occurs while loading the resource
     */
    private void newStage(Parent root, String resource) throws IOException {
        if (resource != null)
            root = FXMLLoader.load(getClass().getResource(resource));
        Stage stage = new Stage();
        stage.setScene(new Scene(root, USE_COMPUTED_SIZE, USE_COMPUTED_SIZE));
        stage.setResizable(false);
        AppFX.titleAndIcon(stage);
        stage.show();
    }

}
