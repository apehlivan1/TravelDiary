package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.dao.DestinationDaoImpl;
import ba.unsa.etf.rpr.domain.Destination;
import ba.unsa.etf.rpr.exceptions.AppException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class DestinationManagerTest {

    private DestinationManager destinationManager;
    private Destination destination;
    private DestinationDaoImpl destinationDao;
    private List<Destination> destinations;

    @BeforeEach
    public void initialize() {
        destinationManager = Mockito.mock(DestinationManager.class);
        destination = new Destination(113, "Destination", "", "Description", 1, 5);
        destinationDao = Mockito.mock(DestinationDaoImpl.class);
        destinations = new ArrayList<>();
        destinations.addAll(Arrays.asList(new Destination("Dest1"), new Destination("Dest2")));
    }

    @Test
    void add() throws AppException {
        MockedStatic<DaoFactory> daoFactoryMockedStatic = Mockito.mockStatic(DaoFactory.class);
        daoFactoryMockedStatic.when(DaoFactory::getDestinationDao).thenReturn(destinationDao);

        when(DaoFactory.getDestinationDao().getAll()).thenReturn(destinations);
        Mockito.doCallRealMethod().when(destinationManager).add(destination);
        AppException quoteException = Assertions.assertThrows(AppException.class, () -> {
            destinationManager.add(destination);}, "ID is autogenerated. Can't add user with ID.");

        assertEquals("ID is autogenerated. Can't add user with ID.", quoteException.getMessage());
        daoFactoryMockedStatic.verify(DaoFactory::getDestinationDao);
        Mockito.verify(destinationManager).add(destination);
        daoFactoryMockedStatic.close();
    }


    @Test
    void addAndUpdate() throws AppException {
        Destination newDestination = new Destination(0,"New destination", "Location", "Description", 1, 10);
        destinationManager.add(newDestination);
        newDestination.setLocation("Location2");
        newDestination.setName("Something");
        destinationManager.update(newDestination);
        Assertions.assertTrue(true);
        Mockito.verify(destinationManager).add(newDestination);
    }

    @Test
    void addAndDelete() throws AppException {
        Destination newDestination = new Destination(0,"New destination", "Location", "Description", 1, 10);
        destinationManager.add(newDestination);
        destinationManager.delete(newDestination.getId());
        Assertions.assertTrue(true);
        Mockito.verify(destinationManager).delete(newDestination.getId());
    }

    @Test
    void getById() {
        int id = -1;
        DestinationManager destinationManager1 = new DestinationManager();
        AppException myException = Assertions.assertThrows(AppException.class, ()-> {
            destinationManager1.getById(id);}, "ID does not exist in the database.");
        Assertions.assertEquals("ID does not exist in the database.", myException.getMessage());
    }

    @Test
    void validateUserInput() {
        String[] testCases = {
                "Please enter all fields", // Missing fields
                "Name must be between 3 and 45 characters.", // Invalid name length
                "Location must be between 3 and 45 characters.", // Invalid location length
                "" // All fields valid
        };

        String[] names = {null, "A", "Valid Name", "Valid Name"};
        String[] locations = {null, "A", "This is a very long location that exceeds the maximum length allowed", "Valid Location"};

        Destination destination1 = new Destination(113, null, null, "Description", 1, 5);
        DestinationManager destinationManager1 = new DestinationManager();
        for (int i = 0; i < testCases.length; i++) {
            destination1.setName(names[i]);
            destination1.setLocation(locations[i]);
            String result = destinationManager1.validateUserInput(destination1);
            Assertions.assertEquals(testCases[i], result);
        }
    }
}
